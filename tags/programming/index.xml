<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Casper Andersson</title><link>https://casan.se/tags/programming/</link><description>Recent content in programming on Casper Andersson</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 29 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://casan.se/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Hexend - Send raw hex frames</title><link>https://casan.se/blog/hexend-send-raw-hex-frames/</link><pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate><guid>https://casan.se/blog/hexend-send-raw-hex-frames/</guid><description>In my daily work I sometimes want to copy and modify raw frames as hexdumps. I will usually copy a hexdump from Wireshark or Tcpdump. Some times I have, however, written frames from scratch. Not very complex ones; nevertheless, it is nice to have the possibility to.
There are plenty of tools out there for building and sending frames.</description></item><item><title>The day Make started crashing</title><link>https://casan.se/blog/the-day-make-started-crashing/</link><pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate><guid>https://casan.se/blog/the-day-make-started-crashing/</guid><description>This is a short story from $DAYJOB about my discovery and investigations of an issue with the build system.
One day when building our code I suddenly got a segmentation fault when building. An odd occurrence. I could not recall any changes to the build system and checking the Git log I could not find any changes that would affect it.</description></item><item><title>A simpler life without sudo</title><link>https://casan.se/blog/a-simpler-life-without-sudo/</link><pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate><guid>https://casan.se/blog/a-simpler-life-without-sudo/</guid><description>A couple months ago a colleague showed me his post on a life without sudo. In it he demonstrates the elegant use of Linux capabilities(7). If you aren&amp;rsquo;t familiar with capabilities I recommend reading his post first. I started using it myself and found it incredibly convenient. I would run sudo many times per day before.</description></item><item><title>Nondeterministic functions</title><link>https://casan.se/blog/nondeterministic-functions/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://casan.se/blog/nondeterministic-functions/</guid><description>In a previous post I talked about deterministic functions and some useful properties they have. I recommend you read that one first if you haven&amp;rsquo;t already. But deterministic functions aren&amp;rsquo;t all that useful to get tasks done. They only transform data from one form to another, but cannot actually read input from the console or even print to the console.</description></item><item><title>Bouncing balls simulation using X11</title><link>https://casan.se/blog/bouncing-balls-simulation-using-x11/</link><pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate><guid>https://casan.se/blog/bouncing-balls-simulation-using-x11/</guid><description>Recently I got the idea that I wanted to experiment with using X11 directly, instead of some higher-level library where buttons and fields already exist as objects. The goal was to get a better idea of how the graphics and window systems works in Linux (X11 specifically). This wasn&amp;rsquo;t a huge project and I only got to see parts of it before moving on, but it was a very interesting experience.</description></item><item><title>Functions: a deep dive</title><link>https://casan.se/blog/functions-a-deep-dive/</link><pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate><guid>https://casan.se/blog/functions-a-deep-dive/</guid><description>In this post we will take a closer look at functions and some mathematical concepts relating to them. This post assumes you are familiar working with functions in some programming language and some mathematical knowledge of functions as well (like knowing what \(y = f(x)\) means and what a set is).</description></item><item><title>Programming: how to learn it and how to get help.</title><link>https://casan.se/blog/programming-how-to-learn-it-and-how-to-get-help./</link><pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate><guid>https://casan.se/blog/programming-how-to-learn-it-and-how-to-get-help./</guid><description>This article is intended to be read by someone who is looking to learn programming or is just starting out. This doesn&amp;rsquo;t tell you what programming language to choose or what tutorials to follow. Only some general tips to keep in mind when learning.
What is programming? # Many people think that programming is all about writing code.</description></item><item><title>Operators are functions too</title><link>https://casan.se/blog/operators-are-functions-too/</link><pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate><guid>https://casan.se/blog/operators-are-functions-too/</guid><description>Introduction # Most programming languages today have a bunch of operators for different purposes. Usually for mathematical, logical, comparison, and bitwise operations. +, -, *, /, &amp;amp;&amp;amp;, ||, exists in probably every modern language. Developers expect them to exist; no one would want to program without them.
Many languages like to extend their operators, usually +, to work on several types.</description></item><item><title>Static vs dynamic typing</title><link>https://casan.se/blog/static-vs-dynamic-typing/</link><pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate><guid>https://casan.se/blog/static-vs-dynamic-typing/</guid><description>Static and dynamic typing explained # Static typing can find type errors reliably at compile time, which should increase the reliability of the delivered program -- Wikipedia
A statically typed programming language checks that the types of everything matches. If something doesn&amp;rsquo;t match, the compiler stops and displays an error.</description></item></channel></rss>